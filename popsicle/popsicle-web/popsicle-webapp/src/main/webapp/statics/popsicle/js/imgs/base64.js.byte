
var head =[-1,-40,-1,-32,0,16,74,70,73,70,0,1,1,0,0,1,0,1,0,0,-1,-37,0,67,0,40,28,30,35,30,25,40,35,33,35,45,43,40,48,60,100,65,60,55,55,60,123,88,93,73,100,-111,-128,-103,-106,-113,-128,-116,-118,-96,-76,-26,-61,-96,-86,-38,-83,-118,-116,-56,-1,-53,-38,-18,-11,-1,-1,-1,-101,-63,-1,-1,-1,-6,-1,-26,-3,-1,-8,-1,-37,0,67,1,43,45,45,60,53,60,118,65,65,118,-8,-91,-116,-91,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-64,0,17,8,0,31,0,42,3,1,34,0,2,17,1,3,17,1,-1,-60,0,31,0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,-1,-60,0,-75,16,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125,1,2,3,0,4,17,5,18,33,49,65,6,19,81,97,7,34,113,20,50,-127,-111,-95,8,35,66,-79,-63,21,82,-47,-16,36,51,98,114,-126,9,10,22,23,24,25,26,37,38,39,40,41,42,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,-125,-124,-123,-122,-121,-120,-119,-118,-110,-109,-108,-107,-106,-105,-104,-103,-102,-94,-93,-92,-91,-90,-89,-88,-87,-86,-78,-77,-76,-75,-74,-73,-72,-71,-70,-62,-61,-60,-59,-58,-57,-56,-55,-54,-46,-45,-44,-43,-42,-41,-40,-39,-38,-31,-30,-29,-28,-27,-26,-25,-24,-23,-22,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-1,-60,0,31,1,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,-1,-60,0,-75,17,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119,0,1,2,3,17,4,5,33,49,6,18,65,81,7,97,113,19,34,50,-127,8,20,66,-111,-95,-79,-63,9,35,51,82,-16,21,98,114,-47,10,22,36,52,-31,37,-15,23,24,25,26,38,39,40,41,42,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,-126,-125,-124,-123,-122,-121,-120,-119,-118,-110,-109,-108,-107,-106,-105,-104,-103,-102,-94,-93,-92,-91,-90,-89,-88,-87,-86,-78,-77,-76,-75,-74,-73,-72,-71,-70,-62,-61,-60,-59,-58,-57,-56,-55,-54,-46,-45,-44,-43,-42,-41,-40,-39,-38,-30,-29,-28,-27,-26,-25,-24,-23,-22,-14,-13,-12,-11,-10,-9,-8,-7,-6,-1,-38,0,12,3,1,0,2,17,3,17,0,63,0];

	var alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	var code = [];
	for(var index=0; index<alphabet.length; index++){
		code[alphabet.charCodeAt(index)] = index;
	}
	function decode(str){
		str = str.replace( /[^A-Za-z0-9\+\/\=]/g, "" );
		var stringLength = str.length;
		while(str.charAt(stringLength-1)==="="){
			stringLength--;
		}
		var result = new Uint8Array((stringLength/4*3)<<0);
		for(var stringOffset = 0, byteOffset = 0; stringOffset<stringLength; stringOffset += 4, byteOffset += 3){
			stringOffset+1<stringLength&&(result[byteOffset+0] = ((code[str.charCodeAt(stringOffset+0)]&0x3F)<<2)|((code[str.charCodeAt(stringOffset+1)]&0x30)>>4));
			stringOffset+2<stringLength&&(result[byteOffset+1] = ((code[str.charCodeAt(stringOffset+1)]&0x0F)<<4)|((code[str.charCodeAt(stringOffset+2)]&0x3C)>>2));
			stringOffset+3<stringLength&&(result[byteOffset+2] = ((code[str.charCodeAt(stringOffset+2)]&0x03)<<6)|((code[str.charCodeAt(stringOffset+3)]&0x3F)<<0));
		}
		return result;
	}

	function encode(arr){
		var byteLength = arr.length;
		var result = "";
		for(var byteOffset = 0; byteOffset<byteLength; byteOffset += 3){
			result += alphabet.charAt((arr[byteOffset]&0xFC)>>2);
			result += alphabet.charAt(((arr[byteOffset]&0x03)<<4)|(byteOffset+1<byteLength?(arr[byteOffset+1]&0xF0)>>4:0x00));
			result += byteOffset+1<byteLength? alphabet.charAt(((arr[byteOffset+1]&0x0F)<<2)|(byteOffset+2<byteLength?(arr[byteOffset+2]&0xC0)>>6:0x00)):"=";
			result += byteOffset+2<byteLength? alphabet.charAt((arr[byteOffset+2]&0x3F)<<0):"=";
		}
		return result;
	}
	
	 var base64DecodeChars = new Array(
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                        -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57,
                        58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0,  1,  2,  3,  4,  5,  6,
                        7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
                        25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
                        37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1,
                        -1, -1
                );
	 function base64_decode(str){
                var c1, c2, c3, c4;
                var i=0, len = str.length, attBytes = [];
                while (i < len){
                        do{
                                c1 = base64DecodeChars[str.charCodeAt(i++) & 0xff]
                        } while (
                                i < len && c1 == -1
                        );
                        if (c1 == -1) break;
                        do{
                                c2 = base64DecodeChars[str.charCodeAt(i++) & 0xff]
                        } while (
                                i < len && c2 == -1
                        );
                        if (c2 == -1) break;
                        //string += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));
						attBytes.push((c1 << 2) | ((c2 & 0x30) >> 4));
                        do{
                                c3 = str.charCodeAt(i++) & 0xff;
                                if (c3 == 61)
                                        return string;
                                c3 = base64DecodeChars[c3]
                        } while (
                                i < len && c3 == -1
                        );
                        if (c3 == -1) break;
                        //string += String.fromCharCode(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));
						attBytes.push(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));
                        do{
                                c4 = str.charCodeAt(i++) & 0xff;
                                if (c4 == 61) return attBytes;
                                c4 = base64DecodeChars[c4]
                        } while (
                                i < len && c4 == -1
                        );
                        if (c4 == -1) break;
                        //string += String.fromCharCode(((c3 & 0x03) << 6) | c4)
						attBytes.push(((c3 & 0x03) << 6) | c4);
                }
                //return string;
				return attBytes;
        }

