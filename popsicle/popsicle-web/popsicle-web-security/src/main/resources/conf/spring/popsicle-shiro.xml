<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
	default-lazy-init="true">

	<context:property-placeholder
		ignore-unresolvable="true" location="classpath:popsicle.shiro.properties" />


    
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager"/>
	</bean>
	
	 <bean id="pfwSecurityManager" class="com.pfw.popsicle.security.core.PfwSecurityManager">
	 	<!-- <property name="userService" ref="userService"/>
	 	<property name="roleService" ref="roleService"/> -->
	 	<property name="resourceService" ref="resourceService"/>
	</bean>


	<!-- 項目自定义的Realm    -->
	<bean id="shiroDbRealm" class="com.pfw.popsicle.security.core.ShiroDbRealm" init-method="initCredentialsMatcher">
	</bean>
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="shiroDbRealm" />
		<property name="sessionMode" value="native"/>
		<property name="cacheManager" ref="cacheManager"/>
		<!-- 缺省使用的是DefaultWebSessionManager来管理Session，该管理类缺省使用的是使用MemorySessionDAO基于内存来保存和操作用户基本认证信息。如果系统内的用户数特别多，我们需要使用CacheSessionDao来基于Cache进行操作 -->
        <property name="sessionManager" ref="shiroSessionManager"/>
	</bean>
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="ehCacheManager" />
		<property name="cacheManagerConfigFile" value="classpath:conf/spring/ehcache-shiro.xml"/>
	</bean>
	<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
	</bean>
	
	
	<!-- shiroSessionManager -->
    <bean id="shiroSessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionListeners"> 
            <set></set> 
        </property> -->
        <property name="deleteInvalidSessions" value="true"/>
        <property name="globalSessionTimeout" value="1800000" /><!-- 30分钟 -->
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<property name="sessionIdCookie" ref="wapsession" />
		<property name="sessionIdCookieEnabled" value="true"/>
    </bean>
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
    </bean>
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <property name="interval" value="5000"/>
    </bean>
   <!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID, 
		当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
	<bean id="wapsession" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg name="name" value="POPSESSIONID" />
	</bean>
    
	
	<!-- Shiro Filter -->
	<bean id="shiroFilter" class="com.pfw.popsicle.security.core.FilterFactoryBean">
		<property name="pfwSecurityManager" ref="pfwSecurityManager" />
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="${shiro.loginUrl}" />
		<property name="successUrl" value="${shiro.successUrl}" />
		<property name="unauthorizedUrl" value="${shiro.unauthorizedUrl}" />
		<property name="filters">
			<map>
				<entry key="rolesOr">
					<bean class="com.pfw.popsicle.security.core.RolesOrAuthorizationFilter">
					</bean>
				</entry>
			</map>
		</property>
		<!-- 
			anon org.apache.shiro.web.filter.authc.AnonymousFilter 
			authc org.apache.shiro.web.filter.authc.FormAuthenticationFilter 
			authcBasic org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter 
			perms org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter 
			port org.apache.shiro.web.filter.authz.PortFilter 
			rest org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter 
			roles org.apache.shiro.web.filter.authz.RolesAuthorizationFilter 
			ssl org.apache.shiro.web.filter.authz.SslFilter 
			user org.apache.shiro.web.filter.authc.UserFilter 
		-->
		<property name="filterChainDefinitions">
			<value>
				#[main] [user] [role] [urls]
				#[users]
				#admin = admin,admin
				#wulibing=123,系统管理员

				#-----------------------------------------------------------------------------
				# Roles with assigned permissions
				# roleName = perm1, perm2, ...,permN
				#-----------------------------------------------------------------------------
				#[roles]
				#系统管理员 = *
				#wulibing = lightsaber:*
				#wulibing = winnebago:drive:eagle5

				#[main]
				#shiro.loginUrl = /login

				[urls]
				/security/login = authc
				/security/logout = logout
				#/statics/** = anon
				#/security/** = rolesOr[系统管理员]
				#/** = user
			</value>
		</property>
	</bean>
	
	
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- AOP式方法级权限检查 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
</beans>